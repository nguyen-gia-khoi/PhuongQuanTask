{
  "openapi": "3.0.0",
  "info": {
    "title": "ApiDemo Swagger",
    "description": "RESTful API documentation for ApiDemo project",
    "contact": {
      "name": "Your Name",
      "email": "you@example.com",
      "url": "http://github.com/theo4u"
    },
    "license": {
      "name": "MIT",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0",
    "termsOfService": "http://example.com/terms"
  },
  "servers": [
    {
      "url": "http://localhost:1337/"
    }
  ],
  "externalDocs": {
    "url": "https://example.com/docs"
  },
  "components": {
    "securitySchemes": {
      "bearerAuthorization": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter JWT token with `Bearer <token>`"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/user-without-required-constraint"
          },
          {
            "required": [
              "id",
              "name",
              "email",
              "password"
            ]
          }
        ]
      },
      "user-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **User**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email",
            "uniqueItems": true
          },
          "password": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "age": {
            "type": "number",
            "format": "double",
            "minimum": 0
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive"
            ],
            "example": "active"
          }
        }
      }
    },
    "parameters": {
      "AttributeFilterParam": {
        "in": "query",
        "name": "_*_",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "To filter results based on a particular attribute, specify a query parameter with the same name as the attribute defined on your model. For instance, if our `Purchase` model has an `amount` attribute, we could send `GET /purchase?amount=99.99` to return a list of $99.99 purchases."
      },
      "WhereQueryParam": {
        "in": "query",
        "name": "where",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Instead of filtering based on a specific attribute, you may instead choose to provide a `where` parameter with the WHERE piece of a [Waterline criteria](https://sailsjs.com/documentation/concepts/models-and-orm/query-language), _encoded as a JSON string_. This allows you to take advantage of `contains`, `startsWith`, and other sub-attribute criteria modifiers for more powerful `find()` queries.\n\ne.g. `?where={\"name\":{\"contains\":\"theodore\"}}`"
      },
      "LimitQueryParam": {
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The maximum number of records to send back (useful for pagination). Defaults to 30."
      },
      "SkipQueryParam": {
        "in": "query",
        "name": "skip",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The number of records to skip (useful for pagination)."
      },
      "SortQueryParam": {
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The sort order. By default, returned records are sorted by primary key value in ascending order.\n\ne.g. `?sort=lastName%20ASC`"
      }
    }
  },
  "security": [
    {
      "bearerAuthorization": []
    }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Sails blueprint actions for the **User** model"
    }
  ],
  "paths": {
    "/user": {
      "get": {
        "summary": "List users",
        "description": "Retrieve a list of all users with pagination and filters.",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1,
              "example": 1
            },
            "description": "Trang hiện tại"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 10,
              "example": 10
            },
            "description": "Số lượng user trên mỗi trang"
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Lọc theo tên"
          },
          {
            "in": "query",
            "name": "age",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "description": "Lọc theo tuổi"
          },
          {
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Lọc theo email"
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Lọc theo trạng thái"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create user",
        "description": "Create a new user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User's full name"
          },
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User's email address"
          },
          {
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 6
            },
            "description": "User's password (minimum 6 characters)"
          },
          {
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Optional user description"
          },
          {
            "in": "query",
            "name": "age",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "maximum": 150,
              "minimum": 0
            },
            "description": "User's age"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "summary": "Sign in",
        "description": "Sign in with email and password",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/{email}": {
      "delete": {
        "summary": "Delete user",
        "description": "Delete a user by email",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Update a user by email",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "age",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}